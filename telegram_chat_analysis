# Install libraries required

import regex as re
import pandas as pd
from datetime import datetime
import numpy as np
import emoji
import plotly.express as px
from collections import Counter
import matplotlib.pyplot as plt
from os import path
from PIL import Image
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator 
% matplotlib inline
import json
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

##################################################################################

# Reading data-file
with open('C:/file_path.json', encoding='utf-8') as f:
    data = json.load(f)

df = pd.DataFrame(list(dataframe))

# Selecting required columns
df = df[['date', 'from', 'text']]

df.info()

# Working with datetime format
df["date"] = pd.to_datetime(df["date"], format="%Y-%m-%d %H:%M:%S")

##################################################################################

# Descriptive chat statistics

df['text'] = df['text'].astype("string")
total_messages = df['text'].count()

def split_count(text):

    emoji_list = []
    data = regex.findall(r'\X', text)
    for word in data:
        if word in emoji.UNICODE_EMOJI['en'].keys():
            emoji_list.append(word)

    return emoji_list


df['emoji'] = df['text'].apply(split_count)
emojis = sum(df['emoji'].str.len())

URLPATTERN = r'(https?://\S+)'
df['urlcount'] = df.text.apply(lambda x: re.findall(URLPATTERN, x)).str.len()

links = np.sum(df.urlcount)

media_messages = df[df['text'] == ''].shape[0]

print("Put_your_chat_name_here")
print("Messages:", total_messages)
print("Emojis:", emojis)
print("Links:", links)
print("Media", media_messages)

##################################################################################

# Descriptive statistics for each chat member

media_messages_df = df[df['text'] == '']
messages_df = df.drop(media_messages_df.index)
messages_df['Letter_Count'] = messages_df['text'].apply(lambda s : len(s))
messages_df['Word_Count'] = messages_df['text'].apply(lambda s : len(s.split(' ')))
messages_df["MessageCount"] = 1

l = ['member_1', 'member_2', 'member_3','etc']

for i in range(len(l)):
    
    # Filter messages by a specific member
    req_df = messages_df[messages_df['from'] == l[i]]
    print(f'Stats of {l[i]} -')
  
    # shape prints the number of lines = the number of messages sent by the member
    print('Messages Sent', req_df.shape[0])
    
    # Word_Count = the total number of words in one message sent by the member
    # words_per_message = Word_Count / the total number of messages by member
    words_per_message = (np.sum(req_df['Word_Count']))/req_df.shape[0]
    print('Words per message', words_per_message)
    
    # media = media messages sent by the member
    media = media_messages_df[media_messages_df['from'] == l[i]].shape[0]
    print('Media Messages Sent', media)
    
    # emojis = total emojis sent by the member
    emojis = sum(req_df['emoji'].str.len())
    print('Emojis Sent', emojis)
    
    #links = total links sent by the member
    links = sum(req_df["urlcount"])   
    print('Links Sent', links)   
    
    print()

##################################################################################

# Chat word cloud

text = " ".join(review for review in messages_df.text)
print ("There are {} words in all the messages.".format(len(text)))

wordcloud = WordCloud(stopwords=stop_words, background_color="white").generate(text)

plt.figure( figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

##################################################################################

# Word cloud for each chat member

l = ['member_1', 'member_2', 'member_3','etc']

for i in range(len(l)):
    dummy_df = messages_df[messages_df['from'] == l[i]]
    text = " ".join(review for review in dummy_df.text)
    stop_words = stopwords.words('russian')
    stop_words.extend(['что', 'это', 'так', 'вот', 'быть', 'как', 'в', '—', '–', 'к', 'на', '...'])

    print('Author name', l[i])
    wordcloud = WordCloud(stopwords=stop_words, background_color="white").generate(text)
  
    plt.figure(figsize=(10,5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis("off")
    plt.show()
    
##################################################################################
